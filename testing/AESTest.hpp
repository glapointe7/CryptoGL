
#ifndef AESTEST_HPP
#define AESTEST_HPP

#include <gtest/gtest.h>
#include "../src/AES.hpp"
#include "../src/Digest.hpp"
#include "../src/MAC.hpp"

class AESTest : public ::testing::Test
{
protected:
   AES *A, *B, *C;

   virtual void SetUp()
   {
      A = new AES({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f});
      B = new AES({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
         0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17});
      C = new AES({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
         0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F});
   }

   virtual void TearDown()
   {
      delete A;
      delete B;
      delete C;
   }
};

TEST_F(AESTest, encode128Bits)
{
   const BytesVector clear_text = {
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
   };

   EXPECT_EQ("69C4E0D86A7B0430D8CDB78070B4C55A", Digest::hexDigest(A->encode(clear_text)));
}

TEST_F(AESTest, encode192Bits)
{
   const BytesVector clear_text = {
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
   };

   EXPECT_EQ("DDA97CA4864CDFE06EAF70A0EC0D7191", Digest::hexDigest(B->encode(clear_text)));
}

TEST_F(AESTest, encode256Bits)
{
   const BytesVector clear_text = {
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
   };

   EXPECT_EQ("8EA2B7CA516745BFEAFC49904B496089", Digest::hexDigest(C->encode(clear_text)));
}

TEST_F(AESTest, decode128Bits)
{
   const BytesVector clear_text = {
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
   };

   EXPECT_EQ(Digest::hexDigest(clear_text), Digest::hexDigest(A->decode(Digest::getBytesFromHexDigest("69C4E0D86A7B0430D8CDB78070B4C55A"))));
}

TEST_F(AESTest, decode192Bits)
{
   const BytesVector clear_text = {
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
   };

   EXPECT_EQ(Digest::hexDigest(clear_text), Digest::hexDigest(B->decode(Digest::getBytesFromHexDigest("DDA97CA4864CDFE06EAF70A0EC0D7191"))));
}

TEST_F(AESTest, decode256Bits)
{
   const BytesVector clear_text = {
      0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
   };

   EXPECT_EQ(Digest::hexDigest(clear_text), Digest::hexDigest(C->decode(Digest::getBytesFromHexDigest("8EA2B7CA516745BFEAFC49904B496089"))));
}

/*
 * OMAC Tests
 */
TEST_F(AESTest, encodeEmpty128BitsOMAC)
{  
   OMAC<AES> omac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

   EXPECT_EQ("F6BC6A41F4F84593809E59B719299CFE", Digest::hexDigest(omac.encode({})));
}

TEST_F(AESTest, encode128BitsOMAC)
{  
   OMAC<AES> omac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

   EXPECT_EQ("070A16B46B4D4144F79BDD9DD04A287C", Digest::hexDigest(
      omac.encode({0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A})));
}
        
TEST_F(AESTest, encode40BitsMessage128BitsOMAC)
{  
   OMAC<AES> omac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

   EXPECT_EQ("23FDAA0831CD314491CE4B25ACB6023B", Digest::hexDigest(omac.encode(Digest::getBytesFromHexDigest(
           "6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411"))));
}    

TEST_F(AESTest, encode64BitsMessage128BitsOMAC)
{  
   OMAC<AES> omac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

   EXPECT_EQ("51F0BEBF7E3B9D92FC49741779363CFE", Digest::hexDigest(omac.encode(Digest::getBytesFromHexDigest(
           "6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411E5FBC1191A0A52EFF69F2445DF4F9B17AD2B417BE66C3710"))));
}

/*
 * CMAC Tests
 */
TEST_F(AESTest, encodeEmpty128BitsCMAC)
{  
   CMAC<AES> cmac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

   EXPECT_EQ("BB1D6929E95937287FA37D129B756746", Digest::hexDigest(cmac.encode({})));
}

TEST_F(AESTest, encode128BitsCMAC)
{  
   CMAC<AES> cmac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

   EXPECT_EQ("070A16B46B4D4144F79BDD9DD04A287C", Digest::hexDigest(
      cmac.encode({0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A})));
}

TEST_F(AESTest, encode40BitsMessage128BitsCMAC)
{  
   CMAC<AES> cmac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

   EXPECT_EQ("DFA66747DE9AE63030CA32611497C827", Digest::hexDigest(cmac.encode(Digest::getBytesFromHexDigest(
           "6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411"))));
}

/*
 * TMAC Tests
 */
TEST_F(AESTest, encodeEmpty128BitsTMAC)
{  
   TMAC<AES> tmac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C},
                  {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});

   EXPECT_EQ("4C08220C79D9191022DC6674874CEAF8", Digest::hexDigest(tmac.encode({})));
}

TEST_F(AESTest, encode128BitsTMAC)
{  
   TMAC<AES> tmac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C},
                  {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});

   EXPECT_EQ("6C3076442EEAD2741DD08057A2F51F44", Digest::hexDigest(tmac.encode(
         {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A})));
}

TEST_F(AESTest, encode40BitsMessage128BitsTMAC)
{  
   TMAC<AES> tmac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C},
           {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});

   EXPECT_EQ("B656B827EABDF8E5D7F460E9F5100769", Digest::hexDigest(tmac.encode(Digest::getBytesFromHexDigest(
           "6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411"))));
}

/*
 * PMAC Tests
 */
TEST_F(AESTest, encodeEmpty128BitsPMAC)
{  
   PMAC<AES> pmac({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});

   EXPECT_EQ("4399572CD6EA5341B8D35876A7098AF7", Digest::hexDigest(pmac.encode({})));
}

TEST_F(AESTest, encode128BitsPMAC)
{  
   PMAC<AES> pmac({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});

   EXPECT_EQ("EBBD822FA458DAF6DFDAD7C27DA76338", Digest::hexDigest(pmac.encode(
           {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F})));
}

/*
 * AES-XCBC-MAC Tests
 * Source : http://www.ietf.org/rfc/rfc3566.txt
 */
TEST_F(AESTest, encodeEmpty128BitsAES_XCBC_MAC)
{  
   AES_XCBC_MAC xcbc({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});

   EXPECT_EQ("75F0251D528AC01C4573DFD584D79F29", Digest::hexDigest(xcbc.encode({})));
}

#endif