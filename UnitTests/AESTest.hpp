
#ifndef AESTEST_HPP
#define AESTEST_HPP

#include "Test.hpp"
#include "../src/AES.hpp"
#include "../src/MAC.hpp"

namespace UnitTests
{
    class AESTest : public Test
    {
    protected:
       AES *A, *B, *C;

       void setUp() override
       {
          A = new AES({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f});
          B = new AES({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
             0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17});
          C = new AES({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
             0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F});
       }

       void tearDown() override
       {
          delete A;
          delete B;
          delete C;
       }
    };

    TEST(AESEncodeECB128Bits, AESTest)
    {
       const BytesVector clear_text = {
          0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
       };

       compare(StringTest("69C4E0D86A7B0430D8CDB78070B4C55A"), A->encode(clear_text).toHexString());
    }

    TEST(AESEncodeECB192Bits, AESTest)
    {
       const BytesVector clear_text = {
          0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
       };

       compare(StringTest("DDA97CA4864CDFE06EAF70A0EC0D7191"), B->encode(clear_text).toHexString());
    }

    TEST(AESEncodeECB256Bits, AESTest)
    {
       const BytesVector clear_text = {
          0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
       };

       compare(StringTest("8EA2B7CA516745BFEAFC49904B496089"), C->encode(clear_text).toHexString());
    }

    TEST(AESDecodeECB128Bits, AESTest)
    {
       const BytesVector clear_text = {
          0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
       };

       const StringTest message("69C4E0D86A7B0430D8CDB78070B4C55A");
       compare(clear_text.toHexString(), A->decode(message.hexToBytes()).toHexString());
    }

    TEST(AESDecodeECB192Bits, AESTest)
    {
       const BytesVector clear_text = {
          0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
       };

       const StringTest message("DDA97CA4864CDFE06EAF70A0EC0D7191");
       compare(clear_text.toHexString(), B->decode(message.hexToBytes()).toHexString());
    }

    TEST(AESDecodeECB256Bits, AESTest)
    {
       const BytesVector clear_text = {
          0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
       };

       const StringTest message("8EA2B7CA516745BFEAFC49904B496089");
       compare(clear_text.toHexString(), C->decode(message.hexToBytes()).toHexString());
    }

    /*
     * OMAC Tests
     */
    TEST(AESEncodeOMACEmptyValue128Bits, AESTest)
    {  
       OMAC<AES> omac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

       compare(StringTest("F6BC6A41F4F84593809E59B719299CFE"), omac.encode({}).toHexString());
    }

    TEST(AESEncodeOMACNormalCase128Bits, AESTest)
    {  
       OMAC<AES> omac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

       compare(StringTest("070A16B46B4D4144F79BDD9DD04A287C"), 
               omac.encode({0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A}).toHexString());
    }

    TEST(AESEncodeOMAC40BitsMessage128Bits, AESTest)
    {  
       OMAC<AES> omac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

       const StringTest message = "6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411";
       compare(StringTest("23FDAA0831CD314491CE4B25ACB6023B"), omac.encode(message.hexToBytes()).toHexString());
    }    

    TEST(AESEncodeOMAC64BitsMessage128Bits, AESTest)
    {  
       OMAC<AES> omac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

       const StringTest message = "6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411E5FBC1191A0A52EFF69F2445DF4F9B17AD2B417BE66C3710";
       compare(StringTest("51F0BEBF7E3B9D92FC49741779363CFE"), omac.encode(message.hexToBytes()).toHexString());
    }

    /*
     * CMAC Tests
     */
    TEST(AESEncodeCMACEmptyValue128Bits, AESTest)
    {  
       CMAC<AES> cmac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

       compare(StringTest("BB1D6929E95937287FA37D129B756746"), cmac.encode({}).toHexString());
    }

    TEST(AESEncodeCMACNormalCase128Bits, AESTest)
    {  
       CMAC<AES> cmac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

       compare(StringTest("070A16B46B4D4144F79BDD9DD04A287C"), 
               cmac.encode({0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A}).toHexString());
    }

    TEST(AESEncodeCMAC40BitsMessage128Bits, AESTest)
    {  
       CMAC<AES> cmac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C});

       const StringTest message = "6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411";
       compare(StringTest("DFA66747DE9AE63030CA32611497C827"), cmac.encode(message.hexToBytes()).toHexString());
    }

    /*
     * TMAC Tests
     */
    TEST(AESEncodeTMACEmptyValue128Bits, AESTest)
    {  
       TMAC<AES> tmac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C},
                      {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});

       compare(StringTest("4C08220C79D9191022DC6674874CEAF8"), tmac.encode({}).toHexString());
    }

    TEST(AESEncodeTMACNormalCase128Bits, AESTest)
    {  
       TMAC<AES> tmac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C},
                      {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});

       compare(StringTest("6C3076442EEAD2741DD08057A2F51F44"), tmac.encode(
             {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A}).toHexString());
    }

    TEST(AESEncodeTMAC40BitsMessage128Bits, AESTest)
    {  
       TMAC<AES> tmac({0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3C},
               {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});

       const StringTest message = "6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411";
       compare(StringTest("B656B827EABDF8E5D7F460E9F5100769"), tmac.encode(message.hexToBytes()).toHexString());
    }

    /*
     * PMAC Tests
     */
    TEST(AESEncodePMACEmptyValue128Bits, AESTest)
    {  
       PMAC<AES> pmac({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});

       compare(StringTest("4399572CD6EA5341B8D35876A7098AF7"), pmac.encode({}).toHexString());
    }

    TEST(AESEncodePMACNormalCase128Bits, AESTest)
    {  
       PMAC<AES> pmac({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});

       compare(StringTest("EBBD822FA458DAF6DFDAD7C27DA76338"), pmac.encode(
               {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F}).toHexString());
    }

    /*
     * AES-XCBC-MAC Tests
     * Source : http://www.ietf.org/rfc/rfc3566.txt
     */
    TEST(AESEncodeXCBC_MACEmptyValue128Bits, AESTest)
    {  
       AES_XCBC_MAC xcbc({0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F});

       compare(StringTest("75F0251D528AC01C4573DFD584D79F29"), xcbc.encode({}).toHexString());
    }
}

#endif