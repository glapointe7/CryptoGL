#include "RC2.hpp"

#include "Tools.hpp"

const uint8_t RC2::pi_table[256] = {
   0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d,
   0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2,
   0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32,
   0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82,
   0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc,
   0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26,
   0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03,
   0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7,
   0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a,
   0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec,
   0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39,
   0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31,
   0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9,
   0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9,
   0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e,
   0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad
};

const uint8_t RC2::mixup_rotation[4] = {1, 2, 3, 5};

void RC2::setKey(const BytesContainer &key)
{
   const uint8_t key_len = key.size();
   if (key_len > 16 || key_len < 1)
   {
      throw BadKeyLength("Your key has to be between 1 and 16 bytes length.", key_len);
   }

   this->key = key;
}

void RC2::generateSubkeys()
{
   uint8_t tmp_subkeys[128];
   const uint8_t key_len = key.size();
   for (uint8_t i = 0; i < key_len; ++i)
   {
      tmp_subkeys[i] = key[i];
   }

   for (uint8_t i = key_len; i < 128; ++i)
   {
      tmp_subkeys[i] = pi_table[(tmp_subkeys[i - key_len] + tmp_subkeys[i - 1]) & 0xFF];
   }

   const uint8_t T1 = key_len << 3;
   const uint8_t TM = 0xFF >> (7 & -T1);
   const uint8_t T8 = (T1 + 7) >> 3;

   tmp_subkeys[128 - T8] = pi_table[tmp_subkeys[128 - T8] & TM];
   for (int8_t i = 127 - T8; i >= 0; --i)
   {
      tmp_subkeys[i] = pi_table[tmp_subkeys[i + 1] ^ tmp_subkeys[i + T8]];
   }

   // Get the 16-bits subkeys in little-endian.
   subkeys.reserve(64);
   for (uint8_t i = 0; i < 64; ++i)
   {
      subkeys.push_back(tmp_subkeys[i << 1] | (tmp_subkeys[(i << 1) + 1] << 8));
   }
}

void RC2::mixUp(uint16_t *input, const uint8_t index, const uint8_t key_index) const
{
   const uint8_t i = 4 + index;
   input[index] += (subkeys[key_index + index] & 0xFFFF) + (input[(i - 2) & 3] & input[(i - 1) & 3]) + (input[(i - 3) & 3] & ~input[(i - 1) & 3]);
   input[index] = rotateLeft(input[index], mixup_rotation[index], 16) & 0xFFFF;
}

void RC2::mash(uint16_t *input, const uint8_t index) const
{
   input[index] += subkeys[input[(index + 3) & 3] & 0x3F] & 0xFFFF;
}

void RC2::inverseMixUp(uint16_t *input, const uint8_t index, const uint8_t key_index) const
{
   const uint8_t i = 4 + index;
   input[index] = rotateRight(input[index], mixup_rotation[index], 16) & 0xFFFF;
   input[index] -= (subkeys[key_index + index] & 0xFFFF) + (input[(i - 2) & 3] & input[(i - 1) & 3]) + (input[(i - 3) & 3] & ~input[(i - 1) & 3]);
}

void RC2::inverseMash(uint16_t *input, const uint8_t index) const
{
   input[index] -= subkeys[input[(index + 3) & 3] & 0x3F] & 0xFFFF;
}

const RC2::BytesContainer RC2::getOutputBlock(const BytesContainer &block, const bool to_encode)
{
   uint16_t input[4];
   for (uint8_t i = 0; i < 8; i += 2)
   {
      input[i >> 1] = block[i] | (block[i + 1] << 8);
   }

   if (to_encode)
   {
      for (uint8_t i = 0; i < 16; ++i)
      {
         const uint8_t key_index = i << 2;
         for (uint8_t j = 0; j < 4; ++j)
         {
            mixUp(input, j, key_index);
         }

         if (i == 4 || i == 10)
         {
            for (uint8_t j = 0; j < 4; ++j)
            {
               mash(input, j);
            }
         }
      }
   }
   else
   {
      for (int8_t i = 15; i >= 0; --i)
      {
         const uint8_t key_index = i << 2;
         if (i == 4 || i == 10)
         {
            for (int8_t j = 3; j >= 0; --j)
            {
               inverseMash(input, j);
            }
         }
         
         for (int8_t j = 3; j >= 0; --j)
         {
            inverseMixUp(input, j, key_index);
         }
      }
   }

   // Convert from 16-bit vector to 8-bit vector.
   BytesContainer output;
   output.reserve(8);
   for (uint8_t i = 0; i < 4; ++i)
   {
      output.push_back(input[i] & 0xFF);
      output.push_back(input[i] >> 8);
   }

   return output;
}

const RC2::BytesContainer RC2::encode(const BytesContainer &clear_text)
{
   return processEncoding(clear_text);
}

const RC2::BytesContainer RC2::decode(const BytesContainer &cipher_text)
{
   return processDecoding(cipher_text);
}